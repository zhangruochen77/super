{"ast":null,"code":"// 引入 axios\nimport axios from 'axios'; // 单独引入element-ui使用\n\nimport { Message } from 'element-ui';\nconst service = axios.create({\n  // baseURL: 'http://106.55.105.100:9999',\n  baseURL: 'http://localhost:8888',\n  timeout: 15000 // 请求超时时间\n\n}); // 设置响应接口\n\nservice.interceptors.response.use(success => {\n  // 访问到了后端的接口，需要判断是否逻辑正确\n  if (success.status && success.status === 200) {\n    return success;\n  }\n\n  return success; // 正常接收到结构 需要将对象返回\n}, error => {\n  // 直接错误响应，直接服务器都不让进行访问\n  console.log(error.url);\n\n  if (error.response.code === 403) {\n    // 没有登录\n    console.log('未登录');\n    Message.error('未登录');\n  }\n\n  if (error.response.code === 500) {\n    // 对应提示服务器错误\n    console.log('服务器错误:' + error);\n    Message.error('服务器开小差了');\n  } // ...\n\n\n  return;\n});\nservice.interceptors.request.use(success => {\n  // 表明这是后台项目 其作用在于判别前后台的不同操作\n  success.headers['plat'] = 'END'; // 请求前查询是否包含 token 如果有 token 则携带 token\n\n  if (window.sessionStorage.getItem('token')) {\n    success.headers['Authorization'] = window.sessionStorage.getItem('token'); // Message.info(window.sessionStorage.getItem('token'))\n  }\n\n  return success;\n}, error => {});\nexport default service;","map":{"version":3,"names":["axios","Message","service","create","baseURL","timeout","interceptors","response","use","success","status","error","console","log","url","code","request","headers","window","sessionStorage","getItem"],"sources":["D:/code/js/project/supermarket/src/utils/request.js"],"sourcesContent":["// 引入 axios\r\nimport axios from 'axios'\r\n// 单独引入element-ui使用\r\nimport {Message} from 'element-ui'\r\n\r\nconst service = axios.create({\r\n    // baseURL: 'http://106.55.105.100:9999',\r\n    baseURL: 'http://localhost:8888',\r\n    timeout: 15000 // 请求超时时间\r\n})\r\n\r\n// 设置响应接口\r\nservice.interceptors.response.use(success => {  // 访问到了后端的接口，需要判断是否逻辑正确\r\n\r\n    if (success.status && success.status === 200) {\r\n        return success\r\n    }\r\n\r\n    return success  // 正常接收到结构 需要将对象返回\r\n}, error => {   // 直接错误响应，直接服务器都不让进行访问\r\n\r\n    console.log(error.url)\r\n    if (error.response.code === 403) {\r\n        // 没有登录\r\n        console.log('未登录')\r\n        Message.error('未登录')\r\n    }\r\n\r\n    if (error.response.code === 500) {\r\n        // 对应提示服务器错误\r\n        console.log('服务器错误:' + error)\r\n        Message.error('服务器开小差了')\r\n    }\r\n    // ...\r\n\r\n    return\r\n})\r\n\r\nservice.interceptors.request.use(success => {\r\n    // 表明这是后台项目 其作用在于判别前后台的不同操作\r\n    success.headers['plat'] = 'END'\r\n    // 请求前查询是否包含 token 如果有 token 则携带 token\r\n    if (window.sessionStorage.getItem('token')) {\r\n        success.headers['Authorization'] = window.sessionStorage.getItem('token')\r\n        // Message.info(window.sessionStorage.getItem('token'))\r\n    }\r\n\r\n    return success\r\n}, error => {\r\n\r\n})\r\n\r\nexport default service"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,OAAR,QAAsB,YAAtB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzB;EACAC,OAAO,EAAE,uBAFgB;EAGzBC,OAAO,EAAE,KAHgB,CAGV;;AAHU,CAAb,CAAhB,C,CAMA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,QAArB,CAA8BC,GAA9B,CAAkCC,OAAO,IAAI;EAAG;EAE5C,IAAIA,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAACC,MAAR,KAAmB,GAAzC,EAA8C;IAC1C,OAAOD,OAAP;EACH;;EAED,OAAOA,OAAP,CANyC,CAMzB;AACnB,CAPD,EAOGE,KAAK,IAAI;EAAI;EAEZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAlB;;EACA,IAAIH,KAAK,CAACJ,QAAN,CAAeQ,IAAf,KAAwB,GAA5B,EAAiC;IAC7B;IACAH,OAAO,CAACC,GAAR,CAAY,KAAZ;IACAZ,OAAO,CAACU,KAAR,CAAc,KAAd;EACH;;EAED,IAAIA,KAAK,CAACJ,QAAN,CAAeQ,IAAf,KAAwB,GAA5B,EAAiC;IAC7B;IACAH,OAAO,CAACC,GAAR,CAAY,WAAWF,KAAvB;IACAV,OAAO,CAACU,KAAR,CAAc,SAAd;EACH,CAbO,CAcR;;;EAEA;AACH,CAxBD;AA0BAT,OAAO,CAACI,YAAR,CAAqBU,OAArB,CAA6BR,GAA7B,CAAiCC,OAAO,IAAI;EACxC;EACAA,OAAO,CAACQ,OAAR,CAAgB,MAAhB,IAA0B,KAA1B,CAFwC,CAGxC;;EACA,IAAIC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAJ,EAA4C;IACxCX,OAAO,CAACQ,OAAR,CAAgB,eAAhB,IAAmCC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAnC,CADwC,CAExC;EACH;;EAED,OAAOX,OAAP;AACH,CAVD,EAUGE,KAAK,IAAI,CAEX,CAZD;AAcA,eAAeT,OAAf"},"metadata":{},"sourceType":"module"}